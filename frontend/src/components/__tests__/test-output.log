AttributeComponent transformed content: function AttributeComponent() {
          return (
            <div className={styles.container}>
              <button onClick={handleClick>}
              <span style={{color: }}'}}b}}l}}u}}e}}'}}>}}}
            </div></span></button></span></button></span></button></span></button></span></button></span></button></span></button>
          );
        }
FragmentComponent transformed content: function FragmentComponent() {
          return (
            <>
              <div>First</div>
              <div>Second
            </></div></div></div></div></div></div></div></div>
          );
        }
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span></div></div></div></div></div></div></div></div>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
</span>
</div>
});}
render(<DynamicComponent />);

AttributeComponent transformed content: function AttributeComponent() {
          return (
            <div className={styles.container}>
              <button onClick={handleClick
              <span style={{color: 'blue'
            </div>
          );
        }}}}
FragmentComponent transformed content: function FragmentComponent() {
          return (
            <>
              <div>First</div>
              <div>Second
            </>
          );
        }
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}});}
render(<DynamicComponent />);

AttributeComponent transformed content: function AttributeComponent() {
          return (
            <div className={styles.container}>
              <button onClick={handleClick>}
              <span style={{color: }}'}}b}}l}}u}}e}}'}}>}}}
            </div></span></button></span></button></span></button></span></button></span></button></span></button></span></button>
          );
        }
FragmentComponent transformed content: function FragmentComponent() {
          return (
            <>
              <div>First</div>
              <div>Second
            </></div></div></div></div></div></div></div></div>
          );
        }
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span></div></div></div></div></div></div></div></div>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
</span>
</div>
});}
render(<DynamicComponent />);

AttributeComponent transformed content: function AttributeComponent() {
          return (
            <div className={styles.container}>
              <button onClick={handleClick>}
              <span style={{color: }}'}}b}}l}}u}}e}}'}}>}}}
            </div></span></button></span></button></span></button></span></button></span></button></span></button></span></button>
          );
        }
FragmentComponent transformed content: function FragmentComponent() {
          return (
            <>
              <div>First</div>
              <div>Second
            </></div></div></div></div></div></div></div></div>
          );
        }
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span></div></div></div></div></div></div></div></div>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
</span>
</div>
});}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span></div></div></div></div></div></div></div></div>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
</span>
</div>
});}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item => )}span>{item.name);}
</div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item => )}span>{item.name);}
</div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item => )}span>{item.name);}
</div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item => )}span>{item.name);}
</div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item => )}span>{item.name);}
</div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span></div></div></div></div></div></div></div></div>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
</span>
</div>
});}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span></div></div></div></div></div></div></div></div>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
</span>
</div>
});}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span></div></div></div></div></div></div></div></div>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
</span>
</div>
});}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div></div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}}});</div></span>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div></div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}}});</div></span>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</span></div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}});}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}}});</div></span>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}}});</div></span>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}}});</div></span>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}}});</div></span>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</span></div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}});}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</span></div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}});}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div </div> ); }</span></div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}});}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</span></div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}});}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</span></div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name}}}))</span></div>);
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              </div><span>Unclosed span
              <div>Nested div</div></span>
            </div>
          );
        }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                </div><span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> </div><span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div>{items.map(item => </div><span>{item.name}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name);}}}</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});</span></div>
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
}
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
}
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
}
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
}
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
}
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
}
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
}
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
}
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
}
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
}
BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);

BrokenComponent cleaned content: function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>)}
render(<DynamicComponent />);


=== Starting Debug Test ===


Extracted Functions: 

Extracted Component: 

=== Starting Debug Test ===


Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Component Content: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div>});
}

Validation Result: false

=== Starting Debug Test ===


Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Component Content: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div>});
}

AST Parse Error: [object Object]

Validation Result: false

=== Starting Debug Test ===


Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Component Content: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}

AST Parse Error: [object Object]

Validation Result: false

=== Starting Debug Test ===


Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Component Content: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}

Attempting direct parse...
AST Parse Error: [object Object]

Attempting to fix the code...

=== Starting Debug Test ===


Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Component Content: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}

Attempting direct parse...
AST Parse Error: [object Object]

Attempting to fix the code...
Fixed Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Component Content: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}

Attempting direct parse...
AST Parse Error: [object Object]

Attempting to fix the code...
Fixed Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Attempting validation...
Validation Result: false

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Attempting final fix...
Final Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}
Final Validation: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Component Content: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}

Attempting direct parse...
AST Parse Error: [object Object]

Attempting to fix the code...
Fixed Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Attempting validation...
Validation Result: false

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Attempting final fix...
Final Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });
}
Final Validation: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Extracted Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text </p> </section> </div> });

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
</p>
</section>
</div>
}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
</p>
</section>
</div>
}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
</p>
</section>
</div>
}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() {
        return (<div>
            <h1>Title</h1>
            <section>
              <p>Some text
</p>
</section>
</div>
);
}

Final Validation: true

Parsing fixed code...
Fixed AST Parse Success: FunctionDeclaration

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() {
        return (<div>
            <h1>Title</h1>
            <section>
              <p>Some text
</p>
</section>
</div>
);

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

=== Starting Debug Test ===

Original Code: 
      function BrokenComponent() {
        return (
          <div>
            <h1>Title</h1>
            <section>
              <p>Some text
    

Fixed Code: function BrokenComponent() {
        return (<div>
            <h1>Title</h1>
            <section>
              <p>Some text
</p>
</section>
</div>
);
}

Final Validation: true

Parsing fixed code...
Fixed AST Parse Success: FunctionDeclaration

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
Starting fixSnippet with code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600">Crafted with love and time, our signature sourdough
      
Finished fixSnippet. Final code: function ProductSection() {
          return (
            <section className="py-12">
              <div className="container mx-auto">
                <h2 className="text-3xl font-bold mb-8">Our Products</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4">Artisan Sourdough</h3>
                    <p className="text-gray-600"></p></div></div></div></section>Crafted with love and time, our signature sourdough
      }
Starting fixSnippet with code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}
Finished fixSnippet. Final code: function HeroSection() {
          const [isOpen, setIsOpen] = React.useState(false);

          return (
            <div className="relative">
              <header className="fixed top-0 w-full bg-white/80 backdrop-blur-sm">
                <nav className="container mx-auto px-4 py-3">
                  <Button onClick={() => setIsOpen(!isOpen)}</Button></nav></header></div>
Starting fixSnippet with code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img src="/img2.jpg" className="rounded-lg"
      
Finished fixSnippet. Final code: function ImageGallery() {
          return (
            <div className="grid grid-cols-3 gap-4">
              <img src="/img1.jpg" className="rounded-lg" />
              <img /></div>}
Starting fixSnippet with code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }
Finished fixSnippet. Final code: function DynamicForm() {
          return (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                console.log("submitted");
              }</form>}
Starting fixSnippet with code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}
Finished fixSnippet. Final code: function CommentedComponent() {
          return (
            <div>
              {/* This is a JSX comment with <tags> inside */}</div>}
Starting fixSnippet with code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}
Finished fixSnippet. Final code: function Counter() {
          const [count, setCount] = React.useState(0);

          return (
            <div className="p-4 border rounded">
              <p>Count: {count}</p></div>}
BrokenComponent cleaned content: function BrokenComponent() {
          return (<div>
              <span>Unclosed span
              <div>Nested div</div></span>
            </div>
);
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (<div>
{items.map(item =>)}
);</div>
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: function BrokenComponent() {
          return (<div>
              <h1>Title</h1>
              <section>
                <p>Some text</p>
</section>
</div>
);

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Container HTML: <div data-testid="live-provider"><div data-testid="preview-wrapper"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Container HTML: <div data-testid="live-provider"><div data-testid="preview-wrapper"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-wrapper"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }</div>
render(<BrokenComponent />);

DynamicComponent cleaned content: function DynamicComponent() {
          return (
            <div>
{items.map(item =>)}
                <span>{item.name}</div></span>}
render(<DynamicComponent />);


=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      </div></section></p>}

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
}
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
}

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      
Cleaned code for LiveProvider: import React from "react";
function Header() {} return () <header data-testid="header-component" className=""bg-slate-900" text-white py-4"> <div className=""container" mx-auto px-4"> <nav className=""flex" items-center justify-between"> <h1 className=""text-xl" font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
}
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {} return () <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
}
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {} return () <div> {items.map(item}) => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);
}

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]
Cleaned code for LiveProvider: import React from "react";
function Header() {} return () <header data-testid="header-component" className=""bg-slate-900" text-white py-4"> <div className=""container" mx-auto px-4"> <nav className=""flex" items-center justify-between"> <h1 className=""text-xl" font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
}
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4"> <div className="container mx-auto px-4"> <nav className="flex items-center justify-between"> <h1 className="text-xl font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: 

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4"> <div className="container mx-auto px-4"> <nav className="flex items-center justify-between"> <h1 className="text-xl font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4"> <div className="container mx-auto px-4"> <nav className="flex items-center justify-between"> <h1 className="text-xl font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4"> <div className="container mx-auto px-4"> <nav className="flex items-center justify-between"> <h1 className="text-xl font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4"> <div className="container mx-auto px-4"> <nav className="flex items-center justify-between"> <h1 className="text-xl font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4"> <div className="container mx-auto px-4"> <nav className="flex items-center justify-between"> <h1 className="text-xl font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4"> <div className="container mx-auto px-4"> <nav className="flex items-center justify-between"> <h1 className="text-xl font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() { return ( <div> <span>Unclosed span <div>Nested div</div></span> </div> ); }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() { return ( <div> {items.map(item => <span>{item.name}}});)}</span></div>
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4"> <div className="container mx-auto px-4"> <nav className="flex items-center justify-between"> <h1 className="text-xl font-bold">Test Header</h1> <Button>Click Me</Button> </nav> </div> </header> ); }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
Original code: function SimpleComponent() {
          return (
            <div>Hello World</div>
          );
        }
After whitespace normalization: function SimpleComponent() {
return (
<div>Hello World</div>
);
}
After adding imports: import React from "react";
function SimpleComponent() {
return (
<div>Hello World</div>
);
}
After wrapping in function: import React from "react";
function SimpleComponent() {
return (
<div>Hello World</div>
);
}
After adding render statement: import React from "react";
function SimpleComponent() {
return (
<div>Hello World</div>
);
}
render(<SimpleComponent />);
After fixing incomplete JSX: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing attributes: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing function bodies: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing return statements: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing fragments: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing comments: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing remaining unclosed tags: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (4:10)
After fixing remaining unclosed tags: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (4:10)
After fixing remaining unclosed tags: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (4:10)
Original code: import React from "react";
function SimpleComponent() {
          return (
            <div>Hello World</div>
          );
        }
render(<SimpleComponent />);
After whitespace normalization: import React from "react";
function SimpleComponent() {
return (
<div>Hello World</div>
);
}
render(<SimpleComponent />);
After adding imports: import React from "react";
function SimpleComponent() {
return (
<div>Hello World</div>
);
}
render(<SimpleComponent />);
After wrapping in function: import React from "react";
function SimpleComponent() {
return (
<div>Hello World</div>
);
}
render(<SimpleComponent />);
After adding render statement: import React from "react";
function SimpleComponent() {
return (
<div>Hello World</div>
);
}
render(<SimpleComponent />);
After fixing incomplete JSX: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing attributes: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing function bodies: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing return statements: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing fragments: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing comments: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
After fixing remaining unclosed tags: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (4:10)
After fixing remaining unclosed tags: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (4:10)
After fixing remaining unclosed tags: import React from "react";
function SimpleComponent() {
return (
<div></di>Hello World</div></div>
);
}
render(<SimpleComponent></SimpleComponen>);</SimpleComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (4:10)
Original code: function Header() {
          return <header>Header</header>;
        }
After whitespace normalization: function Header() {
return <header>Header</header>;
}
After adding imports: import React from "react";
function Header() {
return <header>Header</header>;
}
After wrapping in function: import React from "react";
function Header() {
return <header>Header</header>;
}
After adding render statement: import React from "react";
function Header() {
return <header>Header</header>;
}
render(<Header />);
After fixing incomplete JSX: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing attributes: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing function bodies: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing return statements: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing fragments: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing comments: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing remaining unclosed tags: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <header>. (3:15)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Unexpected token (3:47)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Unexpected token (3:47)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Unexpected token (3:47)
Original code: function Content() {
          return <main>Content</main>;
        }
After whitespace normalization: function Content() {
return <main>Content</main>;
}
After adding imports: import React from "react";
function Content() {
return <main>Content</main>;
}
After wrapping in function: import React from "react";
function Content() {
return <main>Content</main>;
}
After adding render statement: import React from "react";
function Content() {
return <main>Content</main>;
}
render(<Content />);
After fixing incomplete JSX: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
After fixing attributes: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
After fixing function bodies: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
After fixing return statements: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
After fixing fragments: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
After fixing comments: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
After fixing remaining unclosed tags: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <main>. (3:13)
After fixing remaining unclosed tags: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
Parsing failed with config: [object Object] Error: Unexpected token (3:40)
After fixing remaining unclosed tags: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
Parsing failed with config: [object Object] Error: Unexpected token (3:40)
After fixing remaining unclosed tags: import React from "react";
function Content() {
return <main></mai>Content</main></main>;
}
render(<Content></Conten>);</Content>
Parsing failed with config: [object Object] Error: Unexpected token (3:40)
Original code: import React from "react";
function Header() {
          return <header>Header</header>;
        }
render(<Header />);
After whitespace normalization: import React from "react";
function Header() {
return <header>Header</header>;
}
render(<Header />);
After adding imports: import React from "react";
function Header() {
return <header>Header</header>;
}
render(<Header />);
After wrapping in function: import React from "react";
function Header() {
return <header>Header</header>;
}
render(<Header />);
After adding render statement: import React from "react";
function Header() {
return <header>Header</header>;
}
render(<Header />);
After fixing incomplete JSX: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing attributes: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing function bodies: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing return statements: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing fragments: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing comments: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
After fixing remaining unclosed tags: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <header>. (3:15)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Unexpected token (3:47)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Unexpected token (3:47)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return <header></heade>Header</header></header>;
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Unexpected token (3:47)
Original code: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
      </section></div>})
render(<BrokenComponent />);
After whitespace normalization: import React from "react";
function BrokenComponent() {
return (
<div>
<h1>Title</h1>
<section>
</section></div>})
render(<BrokenComponent />);
After adding imports: import React from "react";
function BrokenComponent() {
return (
<div>
<h1>Title</h1>
<section>
</section></div>})
render(<BrokenComponent />);
After wrapping in function: import React from "react";
function BrokenComponent() {
return (
<div>
<h1>Title</h1>
<section>
</section></div>})
render(<BrokenComponent />);
After adding render statement: import React from "react";
function BrokenComponent() {
return (
<div>
<h1>Title</h1>
<section>
</section></div>})
render(<BrokenComponent />);
After fixing incomplete JSX: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing attributes: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing function bodies: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing return statements: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing fragments: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing comments: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><h1></h>Title</h1></h1>
<section></sectio>
</section></section></div>})
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
Original code: import React from "react";
function NestedComponent() {
          const items = ['one', 'two', 'three'];
          return (
            <div>
              {items.map(item => (
                <div key="{item</div">}}})))
render(<NestedComponent />);
After whitespace normalization: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div>
{items.map(item => (
<div key="{item</div">}}})))
render(<NestedComponent />);
After adding imports: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div>
{items.map(item => (
<div key="{item</div">}}})))
render(<NestedComponent />);
After wrapping in function: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div>
{items.map(item => (
<div key="{item</div">}}})))
render(<NestedComponent />);
After adding render statement: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div>
{items.map(item => (
<div key="{item</div">}}})))
render(<NestedComponent />);
After fixing incomplete JSX: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
After fixing attributes: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
After fixing function bodies: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
After fixing return statements: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
After fixing fragments: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
After fixing comments: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
After fixing remaining unclosed tags: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (5:5)
After fixing remaining unclosed tags: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (6:0)
After fixing remaining unclosed tags: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (6:0)
After fixing remaining unclosed tags: import React from "react";
function NestedComponent() {
const items = ['one', 'two', 'three'];
return (
<div></di>
{items.map(item => (
</div><div></di>}}})))
render(</div><NestedComponent></NestedComponen>);</NestedComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (6:0)
Original code: import React from "react";
function CommentedComponent() {
          // This is a comment with JSX-like content: <div>test</div>
          return (
            <div>
              {/* JSX comment */}})
render(<CommentedComponent />);
After whitespace normalization: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div>test</div>
return (
<div>
{/* JSX comment */}})
render(<CommentedComponent />);
After adding imports: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div>test</div>
return (
<div>
{/* JSX comment */}})
render(<CommentedComponent />);
After wrapping in function: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div>test</div>
return (
<div>
{/* JSX comment */}})
render(<CommentedComponent />);
After adding render statement: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div>test</div>
return (
<div>
{/* JSX comment */}})
render(<CommentedComponent />);
After fixing incomplete JSX: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
After fixing attributes: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
After fixing function bodies: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
After fixing return statements: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
After fixing fragments: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
After fixing comments: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
After fixing remaining unclosed tags: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (5:5)
After fixing remaining unclosed tags: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (6:0)
After fixing remaining unclosed tags: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (6:0)
After fixing remaining unclosed tags: import React from "react";
function CommentedComponent() {
// This is a comment with JSX-like content: <div></di>test</div></div>
return (
<div></di>
{/* JSX comment */}})
render(</div><CommentedComponent></CommentedComponen>);</CommentedComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (6:0)
Original code: import React from "react";
function LargeComponent() {
          return (
            <div className="container">
              <header>
                <nav>
                  <ul>
                    {Array.from({ length: 10 </ul></nav></header></div>}}}))
render(<LargeComponent />);
After whitespace normalization: import React from "react";
function LargeComponent() {
return (
<div className="container">
<header>
<nav>
<ul>
{Array.from({ length: 10 </ul></nav></header></div>}}}))
render(<LargeComponent />);
After adding imports: import React from "react";
function LargeComponent() {
return (
<div className="container">
<header>
<nav>
<ul>
{Array.from({ length: 10 </ul></nav></header></div>}}}))
render(<LargeComponent />);
After wrapping in function: import React from "react";
function LargeComponent() {
return (
<div className="container">
<header>
<nav>
<ul>
{Array.from({ length: 10 </ul></nav></header></div>}}}))
render(<LargeComponent />);
After adding render statement: import React from "react";
function LargeComponent() {
return (
<div className="container">
<header>
<nav>
<ul>
{Array.from({ length: 10 </ul></nav></header></div>}}}))
render(<LargeComponent />);
After fixing incomplete JSX: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
After fixing attributes: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
After fixing function bodies: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
After fixing return statements: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
After fixing fragments: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
After fixing comments: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
After fixing remaining unclosed tags: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function LargeComponent() {
return (
<div></di>
</div><header></heade>
</header><nav></na>
</nav><ul></u>
{Array.from({ length: 10 </ul></ul></nav></header></div>}}}))
render(<LargeComponent></LargeComponen>);</LargeComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
Original code: const ArrowComponent = () => {
          return (
            <div>
              <h1>Arrow Function</h1>
            </div>
          );
        }
After whitespace normalization: const ArrowComponent = () => {
return (
<div>
<h1>Arrow Function</h1>
</div>
);
}
After adding imports: import React from "react";
const ArrowComponent = () => {
return (
<div>
<h1>Arrow Function</h1>
</div>
);
}
After wrapping in function: import React from "react";
const ArrowComponent = () => {
return (
<div>
<h1>Arrow Function</h1>
</div>
);
}
After adding render statement: import React from "react";
const ArrowComponent = () => {
return (
<div>
<h1>Arrow Function</h1>
</div>
);
}
render(<ArrowComponent />);
After fixing incomplete JSX: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing attributes: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing function bodies: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing return statements: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing fragments: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing comments: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing remaining unclosed tags: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
Original code: import React from "react";
const ArrowComponent = () => {
          return (
            <div>
              <h1>Arrow Function</h1>
            </div>
          );
        }
render(<ArrowComponent />);
After whitespace normalization: import React from "react";
const ArrowComponent = () => {
return (
<div>
<h1>Arrow Function</h1>
</div>
);
}
render(<ArrowComponent />);
After adding imports: import React from "react";
const ArrowComponent = () => {
return (
<div>
<h1>Arrow Function</h1>
</div>
);
}
render(<ArrowComponent />);
After wrapping in function: import React from "react";
const ArrowComponent = () => {
return (
<div>
<h1>Arrow Function</h1>
</div>
);
}
render(<ArrowComponent />);
After adding render statement: import React from "react";
const ArrowComponent = () => {
return (
<div>
<h1>Arrow Function</h1>
</div>
);
}
render(<ArrowComponent />);
After fixing incomplete JSX: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing attributes: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing function bodies: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing return statements: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing fragments: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing comments: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
After fixing remaining unclosed tags: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
const ArrowComponent = () => {
return (
<div></di>
</div><h1></h>Arrow Function</h1></h1>
</div>
);
}
render(<ArrowComponent></ArrowComponen>);</ArrowComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
Original code: import React from "react";
function AttributeComponent() {
          return (
            <div className={styles.container}})
render(<AttributeComponent />);
After whitespace normalization: import React from "react";
function AttributeComponent() {
return (
<div className={styles.container}})
render(<AttributeComponent />);
After adding imports: import React from "react";
function AttributeComponent() {
return (
<div className={styles.container}})
render(<AttributeComponent />);
After wrapping in function: import React from "react";
function AttributeComponent() {
return (
<div className={styles.container}})
render(<AttributeComponent />);
After adding render statement: import React from "react";
function AttributeComponent() {
return (
<div className={styles.container}})
render(<AttributeComponent />);
After fixing incomplete JSX: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
After fixing attributes: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
After fixing function bodies: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
After fixing return statements: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
After fixing fragments: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
After fixing comments: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
After fixing remaining unclosed tags: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
After fixing remaining unclosed tags: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
After fixing remaining unclosed tags: import React from "react";
function AttributeComponent() {
return (
<div></di>);</div>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
Original code: function FragmentComponent() {
          return (
            <>
              <div>First</div>
              <div>Second
            </>
          );
        }
After whitespace normalization: function FragmentComponent() {
return (
<>
<div>First</div>
<div>Second
</>
);
}
After adding imports: import React from "react";
function FragmentComponent() {
return (
<>
<div>First</div>
<div>Second
</>
);
}
After wrapping in function: import React from "react";
function FragmentComponent() {
return (
<>
<div>First</div>
<div>Second
</>
);
}
After adding render statement: import React from "react";
function FragmentComponent() {
return (
<>
<div>First</div>
<div>Second
</>
);
}
render(<FragmentComponent />);
After fixing incomplete JSX: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing attributes: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing function bodies: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing return statements: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing fragments: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing comments: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing remaining unclosed tags: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
After fixing remaining unclosed tags: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
After fixing remaining unclosed tags: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
After fixing remaining unclosed tags: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
Original code: import React from "react";
function FragmentComponent() {
          return (
            <>
              <div>First</div>
              <div>Second
            </>
          );
        }
render(<FragmentComponent />);
After whitespace normalization: import React from "react";
function FragmentComponent() {
return (
<>
<div>First</div>
<div>Second
</>
);
}
render(<FragmentComponent />);
After adding imports: import React from "react";
function FragmentComponent() {
return (
<>
<div>First</div>
<div>Second
</>
);
}
render(<FragmentComponent />);
After wrapping in function: import React from "react";
function FragmentComponent() {
return (
<>
<div>First</div>
<div>Second
</>
);
}
render(<FragmentComponent />);
After adding render statement: import React from "react";
function FragmentComponent() {
return (
<>
<div>First</div>
<div>Second
</>
);
}
render(<FragmentComponent />);
After fixing incomplete JSX: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing attributes: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing function bodies: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing return statements: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing fragments: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing comments: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
After fixing remaining unclosed tags: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
After fixing remaining unclosed tags: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
After fixing remaining unclosed tags: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
After fixing remaining unclosed tags: import React from "react";
function FragmentComponent() {
return (
<>>First</>></div>
<div></di>Second
</div></>
);
}
render(<FragmentComponent></FragmentComponen>);</FragmentComponent>
Parsing failed with config: [object Object] Error: Unexpected token (4:13)
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
Original code: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
After whitespace normalization: import React from "react";
function BrokenComponent() {
return (
<div>
<span>Unclosed span
<div>Nested div</span>
</div>
);
}
render(<BrokenComponent />);
After adding imports: import React from "react";
function BrokenComponent() {
return (
<div>
<span>Unclosed span
<div>Nested div</span>
</div>
);
}
render(<BrokenComponent />);
After wrapping in function: import React from "react";
function BrokenComponent() {
return (
<div>
<span>Unclosed span
<div>Nested div</span>
</div>
);
}
render(<BrokenComponent />);
After adding render statement: import React from "react";
function BrokenComponent() {
return (
<div>
<span>Unclosed span
<div>Nested div</span>
</div>
);
}
render(<BrokenComponent />);
After fixing incomplete JSX: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing attributes: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing function bodies: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing return statements: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing fragments: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing comments: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() {
return (
<div></di>
</div><span></spa>Unclosed span
</span><div></di>Nested div</div></span>
</div>
);
}
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Original code: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
After whitespace normalization: import React from "react";
function DynamicComponent() {
return (
<div>
{items.map(item =>
<span>{item.name</span></div>}}}))
render(<DynamicComponent />);
After adding imports: import React from "react";
function DynamicComponent() {
return (
<div>
{items.map(item =>
<span>{item.name</span></div>}}}))
render(<DynamicComponent />);
After wrapping in function: import React from "react";
function DynamicComponent() {
return (
<div>
{items.map(item =>
<span>{item.name</span></div>}}}))
render(<DynamicComponent />);
After adding render statement: import React from "react";
function DynamicComponent() {
return (
<div>
{items.map(item =>
<span>{item.name</span></div>}}}))
render(<DynamicComponent />);
After fixing incomplete JSX: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
After fixing attributes: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
After fixing function bodies: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
After fixing return statements: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
After fixing fragments: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
After fixing comments: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
After fixing remaining unclosed tags: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (5:0)
After fixing remaining unclosed tags: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (5:0)
After fixing remaining unclosed tags: import React from "react";
function DynamicComponent() {
return (
<div></di>
{items.map(item =>
</div><span></spa>{item.name</span></span></div>}}}))
render(<DynamicComponent></DynamicComponen>);</DynamicComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (5:0)
Original code: import React from "react";
function MixedComponent() {
          return (
            <>
              <style>
                {
                  /* CSS with braces */
                  `.class {
                    color: blue;
                  }`
                }
              </style>
              <div>
                <script>
                  {
                    /* JS with JSX-like content */
                    `const element = "<div>test</div>"`
                  }
                </script>
              </div>
            </>
          );
        }
render(<MixedComponent />);
After whitespace normalization: import React from "react";
function MixedComponent() {
return (
<>
<style>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</style>
<div>
<script>
{
/* JS with JSX-like content */
`const element = "<div>test</div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent />);
After adding imports: import React from "react";
function MixedComponent() {
return (
<>
<style>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</style>
<div>
<script>
{
/* JS with JSX-like content */
`const element = "<div>test</div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent />);
After wrapping in function: import React from "react";
function MixedComponent() {
return (
<>
<style>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</style>
<div>
<script>
{
/* JS with JSX-like content */
`const element = "<div>test</div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent />);
After adding render statement: import React from "react";
function MixedComponent() {
return (
<>
<style>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</style>
<div>
<script>
{
/* JS with JSX-like content */
`const element = "<div>test</div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent />);
After fixing incomplete JSX: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
After fixing attributes: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
After fixing function bodies: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
After fixing return statements: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
After fixing fragments: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
After fixing comments: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
After fixing remaining unclosed tags: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
Parsing failed with config: [object Object] Error: Unexpected token (11:5)
After fixing remaining unclosed tags: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
Parsing failed with config: [object Object] Error: Unexpected token (11:5)
After fixing remaining unclosed tags: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
Parsing failed with config: [object Object] Error: Unexpected token (11:5)
After fixing remaining unclosed tags: import React from "react";
function MixedComponent() {
return (
<>>
{
/* CSS with braces */
`.class {
color: blue;
}`
}
</>></style>
<div></di>
</div><script></scrip>
{
/* JS with JSX-like content */
`const element = "</script><div></di>test</div></div>"`
}
</script>
</div>
</>
);
}
render(<MixedComponent></MixedComponen>);</MixedComponent>
Parsing failed with config: [object Object] Error: Unexpected token (11:5)
Original code: import React from "react";
function PartialComponent() {
          return (
            <div className="p-4">
              <h1>Title
        </h1></div>})
render(<PartialComponent />);
After whitespace normalization: import React from "react";
function PartialComponent() {
return (
<div className="p-4">
<h1>Title
</h1></div>})
render(<PartialComponent />);
After adding imports: import React from "react";
function PartialComponent() {
return (
<div className="p-4">
<h1>Title
</h1></div>})
render(<PartialComponent />);
After wrapping in function: import React from "react";
function PartialComponent() {
return (
<div className="p-4">
<h1>Title
</h1></div>})
render(<PartialComponent />);
After adding render statement: import React from "react";
function PartialComponent() {
return (
<div className="p-4">
<h1>Title
</h1></div>})
render(<PartialComponent />);
After fixing incomplete JSX: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
After fixing attributes: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
After fixing function bodies: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
After fixing return statements: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
After fixing fragments: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
After fixing comments: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
After fixing remaining unclosed tags: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (4:5)
After fixing remaining unclosed tags: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function PartialComponent() {
return (
<div></di>
</div><h1></h>Title
</h1></h1></div>})
render(<PartialComponent></PartialComponen>);</PartialComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
Original code: import React from "react";
function ComplexComponent() {
          const [state, setState] = React.useState({
            items: [],
            loading: true,
            error: null
          }})
render(<ComplexComponent />);
After whitespace normalization: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent />);
After adding imports: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent />);
After wrapping in function: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent />);
After adding render statement: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent />);
After fixing incomplete JSX: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
After fixing attributes: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
After fixing function bodies: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
After fixing return statements: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
After fixing fragments: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
After fixing comments: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
After fixing remaining unclosed tags: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (7:1)
After fixing remaining unclosed tags: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (7:1)
After fixing remaining unclosed tags: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (7:1)
After fixing remaining unclosed tags: import React from "react";
function ComplexComponent() {
const [state, setState] = React.useState({
items: [],
loading: true,
error: null
}})
render(<ComplexComponent></ComplexComponen>);</ComplexComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (7:1)
Original code: import React from "react";
function EventComponent() {
          const handleClick = (e) => {
            e.preventDefault();
            setState(prev => ({
              ...prev,
              active: !prev.active
          
          return (
            <button
              onClick={handleClick}}}})))
render(<EventComponent />);
After whitespace normalization: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button
onClick={handleClick}}}})))
render(<EventComponent />);
After adding imports: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button
onClick={handleClick}}}})))
render(<EventComponent />);
After wrapping in function: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button
onClick={handleClick}}}})))
render(<EventComponent />);
After adding render statement: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button
onClick={handleClick}}}})))
render(<EventComponent />);
After fixing incomplete JSX: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>
After fixing attributes: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>
After fixing function bodies: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>}
After fixing return statements: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>}
After fixing fragments: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>}
After fixing comments: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>}
After fixing remaining unclosed tags: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>}
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (8:0)
After fixing remaining unclosed tags: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>}
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (8:0)
After fixing remaining unclosed tags: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>}
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (8:0)
After fixing remaining unclosed tags: import React from "react";
function EventComponent() {
const handleClick = (e) => {
e.preventDefault();
setState(prev => ({
...prev,
active: !prev.active
return (
<button></butto>);</button>}
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (8:0)
Original code: import React from "react";
function HookComponent() {
          const [data, setData] = useState();
          
          useEffect(() => {
            const fetchData = async () => {
              const response = await fetch
        }}})
render(<HookComponent />);
After whitespace normalization: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent />);
After adding imports: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent />);
After wrapping in function: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent />);
After adding render statement: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent />);
After fixing incomplete JSX: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
After fixing attributes: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
After fixing function bodies: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
After fixing return statements: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
After fixing fragments: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
After fixing comments: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
After fixing remaining unclosed tags: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (7:2)
After fixing remaining unclosed tags: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (7:2)
After fixing remaining unclosed tags: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (7:2)
After fixing remaining unclosed tags: import React from "react";
function HookComponent() {
const [data, setData] = useState();
useEffect(() => {
const fetchData = async () => {
const response = await fetch
}}})
render(<HookComponent></HookComponen>);</HookComponent>
Parsing failed with config: [object Object] Error: Unexpected token, expected "," (7:2)
Original code: import React from "react";
function Header() {
          return (
            <header className="bg-white shadow-sm">
              <nav>
                <ul className="flex space-x-4

      /// START Main position="main"
      function Main() {
        return (
          <main>
            <h1>Welcome</h1>
            <p>This is the main
        </p></main></nav></header>}}))
render(<Header />);
After whitespace normalization: import React from "react";
function Header() {
return (
<header className="bg-white shadow-sm">
<nav>
<ul className="flex space-x-4
/// START Main position="main"
function Main() {
return (
<main>
<h1>Welcome</h1>
<p>This is the main
</p></main></nav></header>}}))
render(<Header />);
After adding imports: import React from "react";
function Header() {
return (
<header className="bg-white shadow-sm">
<nav>
<ul className="flex space-x-4
/// START Main position="main"
function Main() {
return (
<main>
<h1>Welcome</h1>
<p>This is the main
</p></main></nav></header>}}))
render(<Header />);
After wrapping in function: import React from "react";
function Header() {
return (
<header className="bg-white shadow-sm">
<nav>
<ul className="flex space-x-4
/// START Main position="main"
function Main() {
return (
<main>
<h1>Welcome</h1>
<p>This is the main
</p></main></nav></header>}}))
render(<Header />);
After adding render statement: import React from "react";
function Header() {
return (
<header className="bg-white shadow-sm">
<nav>
<ul className="flex space-x-4
/// START Main position="main"
function Main() {
return (
<main>
<h1>Welcome</h1>
<p>This is the main
</p></main></nav></header>}}))
render(<Header />);
After fixing incomplete JSX: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
After fixing attributes: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
After fixing function bodies: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
After fixing return statements: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
After fixing fragments: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
After fixing comments: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <header>. (4:8)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><nav></na>
</nav><ul></u>
</ul><h1></h>Welcome</h1></h1>
<p>This is the main
</p></p></main></nav></header>}}))
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
Original code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After whitespace normalization: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After adding imports: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After wrapping in function: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After adding render statement: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
render(<BrokenComponent />);
After fixing incomplete JSX: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing attributes: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing function bodies: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing return statements: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing fragments: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing comments: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (2:43)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (2:49)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (2:49)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (2:49)

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]
Original code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After whitespace normalization: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After adding imports: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After wrapping in function: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After adding render statement: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
render(<BrokenComponent />);
After fixing incomplete JSX: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing attributes: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing function bodies: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing return statements: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing fragments: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing comments: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (2:43)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (2:49)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (2:49)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (2:49)

Validation Result: false
Original code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After whitespace normalization: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After adding imports: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After wrapping in function: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
After adding render statement: import React from "react";
function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>
render(<BrokenComponent />);
After fixing incomplete JSX: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing attributes: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing function bodies: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing return statements: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing fragments: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing comments: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <div>. (2:43)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (2:49)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (2:49)
After fixing remaining unclosed tags: import React from "react";
function BrokenComponent() { return ( <div></di> </div><h1></h>Title</h1></h1> <section></sectio> </section><p>Some text });</p></p></section></div>
render(<BrokenComponent></BrokenComponen>);</BrokenComponent>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (2:49)
Original code: function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
After whitespace normalization: function Header() {
return (
<header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header>
);
}
After adding imports: import React from "react";
function Header() {
return (
<header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header>
);
}
After wrapping in function: import React from "react";
function Header() {
return (
<header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header>
);
}
After adding render statement: import React from "react";
function Header() {
return (
<header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header>
);
}
render(<Header />);
After fixing incomplete JSX: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing attributes: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing function bodies: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing return statements: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing fragments: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing comments: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <header>. (4:8)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
Original code: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
After whitespace normalization: import React from "react";
function Header() {
return (
<header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header>
);
}
render(<Header />);
After adding imports: import React from "react";
function Header() {
return (
<header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header>
);
}
render(<Header />);
After wrapping in function: import React from "react";
function Header() {
return (
<header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header>
);
}
render(<Header />);
After adding render statement: import React from "react";
function Header() {
return (
<header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header>
);
}
render(<Header />);
After fixing incomplete JSX: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing attributes: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing function bodies: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing return statements: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing fragments: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing comments: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Expected corresponding JSX closing tag for <header>. (4:8)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
After fixing remaining unclosed tags: import React from "react";
function Header() {
return (
<header></heade>
</header><div></di>
</div><nav></na>
</nav><h1></h>Test Header</h1></h1>
<Button></Butto>Click Me</Button></Button>
</nav>
</div>
</header>
);
}
render(<Header></Heade>);</Header>
Parsing failed with config: [object Object] Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:0)
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: false

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: false
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"><p>Count: 0</p><button>Increment</button></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from "react";
function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:995:12[22m
[0m [90m 993 |[39m     
 [90m 994 |[39m     [90m// Debug the rendered output[39m
[31m[1m>[22m[39m[90m 995 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m     |[39m            [31m[1m^[22m[39m[0m

BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);
Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:998:12[22m
[0m [90m 996 |[39m     [90m// Debug the rendered output[39m
 [90m 997 |[39m     console[33m.[39mlog([32m'Container HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
[31m[1m>[22m[39m[90m 998 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m     |[39m            [31m[1m^[22m[39m[0m

Header element not found in: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1003:12[22m
[0m [90m 1001 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1002 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1003 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1011:12[22m
[0m [90m 1009 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1010 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1011 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

Cleaned code for LiveProvider: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

Header component content: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

Container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1013:12[22m
[0m [90m 1011 |[39m     console[33m.[39mlog([32m'\nContainer HTML:'[39m[33m,[39m container[33m.[39minnerHTML)[33m;[39m
 [90m 1012 |[39m     console[33m.[39mlog([32m'\nScreen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1013 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


Header element not found. Current HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

Available test IDs: live-provider,preview-content
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

3. Extracted Header component: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

4. Initial container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

5. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1015:12[22m
[0m [90m 1013 |[39m     [90m// Debug the rendered output[39m
 [90m 1014 |[39m     console[33m.[39mlog([32m'\n5. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1015 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


6. Header element not found. Available elements: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. LiveProvider props: [object Object]
Transformed code: import React from "react";
function Header() { return ( <header data-testid="header-component" className="bg-slate-900 text-white py-4">
<div className="container mx-auto px-4">
<nav className="flex items-center justify-between">
<h1 className="text-xl font-bold">Test Header</h1>
<Button>Click Me</Button>
</nav>
</div>
</header> ); });
}
render(<Header />);

7. Initial container HTML: <div data-testid="live-provider"><div data-testid="preview-content"></div></div>

8. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-testid[39m=[32m"live-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mdata-testid[39m=[32m"preview-content"[39m
      [36m/>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1047:12[22m
[0m [90m 1045 |[39m     [90m// Debug the rendered output[39m
 [90m 1046 |[39m     console[33m.[39mlog([32m'\n8. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1047 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


9. Header element not found. Available elements: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: () => {
      return /*#__PURE__*/_react.default.createElement('header', {
        'data-testid': 'header-component',
        className: 'bg-slate-900 text-white py-4'
      }, /*#__PURE__*/_react.default.createElement('div', {
        className: 'container mx-auto px-4'
      }, /*#__PURE__*/_react.default.createElement('nav', {
        className: 'flex items-center justify-between'
      }, /*#__PURE__*/_react.default.createElement('h1', {
        className: 'text-xl font-bold'
      }, 'Test Header'), /*#__PURE__*/_react.default.createElement(Button, null, 'Click Me'))));
    }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: () => {
      return /*#__PURE__*/_react.default.createElement('header', {
        'data-testid': 'header-component',
        className: 'bg-slate-900 text-white py-4'
      }, /*#__PURE__*/_react.default.createElement('div', {
        className: 'container mx-auto px-4'
      }, /*#__PURE__*/_react.default.createElement('nav', {
        className: 'flex items-center justify-between'
      }, /*#__PURE__*/_react.default.createElement('h1', {
        className: 'text-xl font-bold'
      }, 'Test Header'), /*#__PURE__*/_react.default.createElement(Button, null, 'Click Me'))));
    }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
BrokenComponent cleaned content: import React from "react";
function BrokenComponent() {
          return (
            <div>
              <span>Unclosed span
              <div>Nested div</span>
            </div>
          );
        }
render(<BrokenComponent />);
DynamicComponent cleaned content: import React from "react";
function DynamicComponent() {
          return (
            <div>
              {items.map(item =>
                <span>{item.name</span></div>}}}))
render(<DynamicComponent />);
Transformed code: import React from "react";
function TestComponent() {
          const [count, setCount] = React.useState(0);
          return (
            <div>
              <p>Count: {count}</p>
              <button onClick="{()" => setCount(c => c + 1)}>
                Increment
              </button>
            </div>
          );
        }
render(<TestComponent />);
Transformed code: "use strict";

var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function AsyncComponent() {
  const [data, setData] = _react.default.useState(null);
  _react.default.useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      setData('Loaded');
    };
    fetchData();
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", null, data ? /*#__PURE__*/_react.default.createElement("p", null, data) : /*#__PURE__*/_react.default.createElement("p", null, "Loading..."));
}
render(/*#__PURE__*/_react.default.createElement(AsyncComponent, null));

=== Starting Debug Test ===

Original Code: 
        function BrokenComponent() {
          return (
            <div>
              <h1>Title</h1>
              <section>
                <p>Some text
      

Fixed Code: import React from "react";

        function BrokenComponent() { return ( <div> <h1>Title</h1> <section> <p>Some text });</p></section></div>

Final Validation: true

Parsing fixed code...
Fixed AST Parse Error: [object Object]

Extracted Functions: BrokenComponent,[object Object]

Component: [object Object]

Closing Tag Analysis: [object Object]

Structure Analysis: [object Object]

Validation Result: true

=== Test Header Component Render Flow ===

1. Original TEST_HEADER_COMPONENT: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }

2. Cleaned code: import React from 'react';
    
    function Header() {
      return (
        <header data-testid="header-component" className="bg-slate-900 text-white py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Test Header</h1>
              <Button>Click Me</Button>
            </nav>
          </div>
        </header>
      );
    }
render(<Header />);

4. Extracted Header component: [object Object]

5. Created Header component: function Header() {
            return /*#__PURE__*/_react["default"].createElement('header', {
              'data-testid': 'header-component',
              className: 'bg-slate-900 text-white py-4'
            }, /*#__PURE__*/_react["default"].createElement('div', {
              className: 'container mx-auto px-4'
            }, /*#__PURE__*/_react["default"].createElement('nav', {
              className: 'flex items-center justify-between'
            }, /*#__PURE__*/_react["default"].createElement('h1', {
              className: 'text-xl font-bold'
            }, 'Test Header'), /*#__PURE__*/_react["default"].createElement(Button, null, 'Click Me'))));
          }

3. Button props: [object Object]
   Button children: Click Me

6. Initial container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

7. Screen debug output:
[36m<body>[39m
  [36m<div>[39m
    [36m<header[39m
      [33mclass[39m=[32m"bg-slate-900 text-white py-4"[39m
      [33mdata-testid[39m=[32m"header-component"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto px-4"[39m
      [36m>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"flex items-center justify-between"[39m
        [36m>[39m
          [36m<h1[39m
            [33mclass[39m=[32m"text-xl font-bold"[39m
          [36m>[39m
            [0mTest Header[0m
          [36m</h1>[39m
          [36m<button[39m
            [33mdata-testid[39m=[32m"button-component"[39m
          [36m>[39m
            [0mClick Me[0m
          [36m</button>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</header>[39m
  [36m</div>[39m
[36m</body>[39m

[2m/Users/spencermerrill/Documents/GitHub/shapewebdev/frontend/src/components/__tests__/CodeTransformation.test.jsx:1044:12[22m
[0m [90m 1042 |[39m     [90m// Debug the rendered output[39m
 [90m 1043 |[39m     console[33m.[39mlog([32m'\n7. Screen debug output:'[39m)[33m;[39m
[31m[1m>[22m[39m[90m 1044 |[39m     screen[33m.[39mdebug()[33m;[39m
 [90m      |[39m            [31m[1m^[22m[39m[0m


8. Header element found: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

9. Final container HTML: <header data-testid="header-component" class="bg-slate-900 text-white py-4"><div class="container mx-auto px-4"><nav class="flex items-center justify-between"><h1 class="text-xl font-bold">Test Header</h1><button data-testid="button-component">Click Me</button></nav></div></header>

10. Element check results: [object Object]
