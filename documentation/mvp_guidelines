Below is a **proposed MVP architecture** (front-end, back-end, and database) that incorporates your answers. We’ll walk through the key components, how they fit together, and what you can hand off to Cursor IDE. This should give you a big-picture plan of attack while keeping it lean enough for an MVP.

---

# **Proposed MVP Architecture**

## 1. **Overall Flow**

1. **User arrives** at ShapeWeb.dev
2. **User signs up** (beta application flow)  
   - Minimal sign-up form; integrated with ZOHO for email-based acceptance.  
   - Once accepted, user is created in your database (Postgres).
3. **Token Allocation**  
   - On account creation, user gets 250 tokens:
     - \~50 tokens per *full landing-page generation*  
     - \~5 tokens per *component edit*  
4. **Landing Page Generation**  
   - User enters a prompt → hits **Generate**.  
   - The back-end calls Claude with SSE → streams code in real-time → front-end renders components as they arrive.  
5. **Accept or Regenerate**  
   - If accepted, a *Project* entry is created in the DB.  
   - If regenerated, the user sees a second pass from Claude. (We decrement tokens each time.)
6. **Project List & Editing**  
   - User can click on a project to see the rendered landing page.  
   - Hover over a component → “chat bubble” → natural language edit → AI updates the code.  
   - When user *saves* edits, the updated code is re-rendered.  
   - Each accepted change is stored as a new version in the DB.  
7. **Agent System** (MVP: Just a “Design Agent”)
   - Provides quick feedback or direct code changes.  
   - Accessed via a simple command palette or UI toggle.  
8. **Multi-Breakpoint Preview**  
   - Buttons for desktop, tablet, mobile widths.  
   - Possibly a slider to let them quickly see how it scales at different widths.  
9. **Code Export**  
   - At MVP, push final code to GitHub (optional).  
   - Or user can download a `.zip`.

---

## 2. **Front-End**

### 2.1 **Stack Choice**
- **React** (or Next.js if you prefer the integrated front-end/back-end approach).
- **ShadCN UI** for the component library.
- **Lucide (or similar)** icons, lazy-loaded + bundled for live preview changes.
- **Babel** for in-browser code transformation (when user is editing text/CSS in real time).

### 2.2 **Key Front-End Pages/Components**
1. **Landing / Homepage**  
   - Basic marketing info + Sign-up (Beta) form.  
2. **Sign-Up / Beta Flow**  
   - Minimal form → stored in DB. Possibly a “Wait for Email” message after submission if you’re gating users.  
3. **Dashboard / Projects**  
   - List of user’s projects (title, creation date).  
   - “Create New Landing Page” button (launch generation flow).  
4. **Prompt Page**  
   - Asks user: “What would you like to build today?”  
   - “Generate” button triggers SSE.  
   - Visual area shows the streaming code as components appear.  
   - “Accept” or “Regenerate” once generation is done.  
5. **Project Editor / Live Preview**  
   - Displays user’s generated landing page.  
   - Hover over components → highlight + “chat bubble.”  
   - On chat bubble click → text prompt → AI returns updated code.  
   - **Preview Modes** (Desktop, Tablet, Mobile).  
   - **Version History**: possibly a simple dropdown or side panel to revert to older versions.  
   - **Export Code** or “Push to GitHub” button.

### 2.3 **State Management**
- **React Context** or Redux (or Zustand, etc.) to store:
  - Current user info (tokens, user ID).  
  - Current project data (latest code, versions).  
  - SSE connection states for live streaming.  

### 2.4 **Handling Real-Time Editing**  
- **On Edit**:  
  1. Send user’s natural language instruction + relevant code snippet to back-end.  
  2. The back-end calls Claude with a short “edit” prompt.  
  3. SSE stream or direct response with the updated code snippet.  
  4. Front-end updates the component in the in-memory representation → re-renders.  
- **Versioning**: Store the newly accepted code in the DB as a new version.

---

## 3. **Back-End**

### 3.1 **Stack Choice**
- **Node.js + Express** or **Next.js Route Handlers** for SSE.  
- **Postgres** for data storage.  
- **AWS S3** for image hosting (when needed).

### 3.2 **Endpoints / Route Structure**

1. **Auth & Beta Flow**  
   - `POST /api/beta-signup` → store user in DB, set “pending” status.  
   - You (the admin) approve them manually or via Zoho → user flagged as “approved.”  
   - `POST /api/login` (if you implement a quick login for the MVP).

2. **Project CRUD**  
   - `POST /api/projects` → Create a new project after user “Accepts” a generation.  
   - `GET /api/projects` → List user’s projects.  
   - `GET /api/projects/:projectId` → Return specific project data, including current code & versions.  

3. **Generation (SSE)**  
   - `POST /api/generate` → Takes user’s prompt + tokens check → calls Claude → streams code back.  
   - Use SSE to push partial code responses to the client.  
   - On completion, front-end shows final code.  

4. **Editing (SSE)**  
   - `POST /api/edit` → Takes user’s “I want to move the CTA button” instruction + code snippet → calls Claude → SSE streams updated snippet.  
   - Decrement ~5 tokens for each edit.  

5. **Versioning**  
   - **On Accept**: `POST /api/projects/:projectId/versions` → Stores a new version (the updated code) in the DB.  

6. **Export to GitHub**  
   - `POST /api/projects/:projectId/export/github` → optional integration with user’s GitHub OAuth token to push code to a new repo or gist.

### 3.3 **Token Management**  
- **DB Columns** for `users` table:
  - `id`, `email`, `status` (“pending” / “approved”), `tokensRemaining`, etc.  
- **Middleware** to check if `tokensRemaining` >= cost for each request.  
- **Decrement** tokens as soon as generation/edit call is initiated.  

### 3.4 **Security & Auth**  
- Simple token-based or JWT approach for MVP.  
- For gating Beta users:  
  - On signup, store them in DB with `status='pending'`.  
  - You can manually update `status='approved'` after review.  
  - Only `status='approved'` can log in and use tokens.

---

## 4. **Database Schema (High-Level)**

Below is a simplified schema you can adapt. (Use SQL or a migration tool.)

```sql
-- USERS
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  status VARCHAR(50) DEFAULT 'pending',  -- or 'approved'
  tokens_remaining INT DEFAULT 250,
  created_at TIMESTAMP DEFAULT NOW()
);

-- PROJECTS
CREATE TABLE projects (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  title VARCHAR(255),
  description TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- VERSIONS
CREATE TABLE project_versions (
  id SERIAL PRIMARY KEY,
  project_id INT REFERENCES projects(id),
  version_number INT,           -- increment each time user accepts changes
  code TEXT,                    -- store JSON or raw code
  created_at TIMESTAMP DEFAULT NOW()
);

-- For minimal analytics / logs (optional)
CREATE TABLE logs (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  action VARCHAR(255),       -- e.g. 'generate', 'edit', 'export'
  tokens_used INT,
  created_at TIMESTAMP DEFAULT NOW()
);
```

**Note:** 
- You can store the “current” code for a project in a `projects.current_version_id` column, or just always fetch the highest `version_number`.  
- If you do large code blocks, consider storing them in a text column or a JSONB column if you want structured data.

---

## 5. **Version Tracking Approach**

- **Simple Approach**  
  - Each time the user *accepts* new AI-generated code, you create a new row in `project_versions`.  
  - Set `version_number = previous_version_number + 1`.  
  - You can allow the user to “Revert” by fetching older code and copying it to a new version (that becomes version_number = current + 1).

---

## 6. **Agent System (Initial “Design Agent”)**

- **Minimal UI**:  
  - A button or command palette (e.g. `Ctrl + D`) → prompts: “Ask Design Agent.”  
  - The prompt could be: “Please review the current layout. Suggest color or layout changes.”  
- **Implementation**:  
  - On back-end, pass user’s code + request to Claude with a “design expert” role or context.  
  - Return suggestions or direct code changes to the front-end.  
  - User can accept → new version is stored.

---

## 7. **Handling Lucide Icons & ShadCN**

1. **Pre-Bundled**  
   - Import the entire icon set in your build so it’s available. (Note: can get big, but for MVP it’s simpler.)  
2. **Lazy-Loading**  
   - For performance, dynamically import icons as needed.  
3. **ShadCN**  
   - Provide a consistent UI kit for form fields, modals, etc.  
   - Ensure you have a structure for “component library” code that AI can reference.

---

## 8. **SSE Implementation Details**

1. **Generate Endpoint**  
   - `POST /api/generate` (with user’s prompt).  
   - Server calls Claude’s API via streaming (if available).  
   - Each chunk received from Claude is piped out to the client via SSE.  
   - The front-end uses an `EventSource` (or fetch streaming in modern browsers) to parse chunks and build the live preview.  
2. **Edit Endpoint**  
   - Same approach, but smaller code snippet to edit.

**Note**: If Claude’s SSE is not stable, you can still poll in short intervals. But SSE is best for a smooth streaming UX.

---

## 9. **Performance Considerations**

- **Alpha Release**  
  - You can host on a smaller instance (e.g. AWS EC2 or Heroku).  
  - SSE concurrency likely small.  
  - Just ensure your streaming logic doesn’t block other requests.  
- **Caching**  
  - If you need speed, you can keep in-memory copies of the user’s code for fast retrieval. But always persist in Postgres as source of truth.

---

## 10. **Exporting to GitHub** (Future or MVP?)

- **User OAuth**  
  - Let user connect GitHub account → store their OAuth token.  
  - You then create a new repo or push to a gist.  
- **Zip Download**  
  - Alternatively, generate a `.zip` with their code and let them download.  
- **For MVP**  
  - Might be enough to just let them copy code or do a simple `.zip` download.

---

## 11. **Putting It All Together**

**Front-End**  
1. **Sign-Up / Beta**: Simple form → call `/api/beta-signup`.  
2. **User Dashboard**  
   - `GET /api/projects` to list.  
   - “New Project” → opens the prompt page.  
3. **Prompt Page**  
   - Calls `/api/generate` SSE → shows streaming code.  
   - “Accept” → `/api/projects` with final code → creates new project + first version.  
4. **Project Editor**  
   - Retrieves latest version from `/api/projects/:projectId`.  
   - Render in live preview.  
   - On highlight + chat bubble → `/api/edit` SSE → updates code.  
   - On accept → `/api/projects/:projectId/versions` → new version.  
   - Toggle breakpoints for responsiveness.  

**Back-End**  
1. **Auth**: Minimal endpoints + token checking.  
2. **Generation** & **Editing**: SSE endpoints that wrap Claude’s API.  
3. **Database**: Postgres for user, project, and version data.  
4. **Token Management**: Decrement tokens before calling Claude. If `tokens_remaining < cost`, block request.  

---

# **Next Steps for Cursor IDE**

1. **Set Up Project Structure**  
   - **Front-end** (React or Next.js)  
     - `pages/` or `src/` with:  
       - `Home`  
       - `Dashboard`  
       - `Prompt`  
       - `ProjectEditor`  
   - **Back-end** (Node/Express or Next.js API routes)  
     - `routes/auth.js` (beta signup, login)  
     - `routes/projects.js` (CRUD, versions)  
     - `routes/generate.js` (SSE)  
     - `routes/edit.js` (SSE)  
   - **Database** (Sequelize, Prisma, or raw SQL)  
     - Migrations for `users`, `projects`, `project_versions`.  
2. **Implement SSE**  
   - Example in Node/Express:
     ```js
     app.post('/api/generate', async (req, res) => {
       res.setHeader('Content-Type', 'text/event-stream');
       // logic to call Claude, stream chunks
       // res.write(`data: ${chunk}\n\n`);
     });
     ```
   - On the client, use `EventSource` or fetch streaming for partial updates.  
3. **Integrate with Claude**  
   - Store your API key securely (env var).  
   - Handle both “Generate” calls and “Edit” calls with carefully constructed prompts.  
4. **Front-End Editor Logic**  
   - Let the user select a component to edit → send the code snippet + user instructions to back-end → SSE response with updated snippet → update local state + re-render.  
5. **Versioning**  
   - Each time the user clicks *Accept*, do a POST to `/api/projects/:id/versions` with the new code.  
6. **Token Handling**  
   - On each request to generate/edit, do a quick check of `tokens_remaining`. If enough, decrement. If not, respond with an error.  
7. **UI for Multi-Breakpoint Preview**  
   - Provide 2–3 device width presets (e.g. 1440px, 1024px, 375px).  
   - Let user click a button to toggle the viewport container’s width.

---

## **Conclusion**

You now have a clear, end-to-end MVP plan:

- **User Onboarding**: Beta sign-up & approval flow.  
- **Token System**: Keep it lightweight; decrement on usage.  
- **Landing Page Generation**: SSE-based streaming of code.  
- **Editing**: Highlight + chat bubble → SSE-based code updates.  
- **Version Tracking**: Simple `project_versions` table, store code on “Accept.”  
- **Optional**: Export to GitHub or `.zip` download.  
- **Design Agent**: Minimal but distinct prompt route for “design review.”

